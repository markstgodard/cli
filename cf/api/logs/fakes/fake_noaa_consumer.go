// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry/cli/cf/api/logs"
	"github.com/cloudfoundry/sonde-go/events"
)

type FakeNoaaConsumer struct {
	TailingLogsStub        func(appGuid string, authToken string, outputChan chan<- *events.LogMessage, errorChan chan<- error)
	tailingLogsMutex       sync.RWMutex
	tailingLogsArgsForCall []struct {
		appGuid    string
		authToken  string
		outputChan chan<- *events.LogMessage
		errorChan  chan<- error
	}
	RecentLogsStub        func(appGuid string, authToken string) ([]*events.LogMessage, error)
	recentLogsMutex       sync.RWMutex
	recentLogsArgsForCall []struct {
		appGuid   string
		authToken string
	}
	recentLogsReturns struct {
		result1 []*events.LogMessage
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	SetOnConnectCallbackStub        func(cb func())
	setOnConnectCallbackMutex       sync.RWMutex
	setOnConnectCallbackArgsForCall []struct {
		cb func()
	}
}

func (fake *FakeNoaaConsumer) TailingLogs(appGuid string, authToken string, outputChan chan<- *events.LogMessage, errorChan chan<- error) {
	fake.tailingLogsMutex.Lock()
	fake.tailingLogsArgsForCall = append(fake.tailingLogsArgsForCall, struct {
		appGuid    string
		authToken  string
		outputChan chan<- *events.LogMessage
		errorChan  chan<- error
	}{appGuid, authToken, outputChan, errorChan})
	fake.tailingLogsMutex.Unlock()
	if fake.TailingLogsStub != nil {
		fake.TailingLogsStub(appGuid, authToken, outputChan, errorChan)
	}
}

func (fake *FakeNoaaConsumer) TailingLogsCallCount() int {
	fake.tailingLogsMutex.RLock()
	defer fake.tailingLogsMutex.RUnlock()
	return len(fake.tailingLogsArgsForCall)
}

func (fake *FakeNoaaConsumer) TailingLogsArgsForCall(i int) (string, string, chan<- *events.LogMessage, chan<- error) {
	fake.tailingLogsMutex.RLock()
	defer fake.tailingLogsMutex.RUnlock()
	return fake.tailingLogsArgsForCall[i].appGuid, fake.tailingLogsArgsForCall[i].authToken, fake.tailingLogsArgsForCall[i].outputChan, fake.tailingLogsArgsForCall[i].errorChan
}

func (fake *FakeNoaaConsumer) RecentLogs(appGuid string, authToken string) ([]*events.LogMessage, error) {
	fake.recentLogsMutex.Lock()
	fake.recentLogsArgsForCall = append(fake.recentLogsArgsForCall, struct {
		appGuid   string
		authToken string
	}{appGuid, authToken})
	fake.recentLogsMutex.Unlock()
	if fake.RecentLogsStub != nil {
		return fake.RecentLogsStub(appGuid, authToken)
	} else {
		return fake.recentLogsReturns.result1, fake.recentLogsReturns.result2
	}
}

func (fake *FakeNoaaConsumer) RecentLogsCallCount() int {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return len(fake.recentLogsArgsForCall)
}

func (fake *FakeNoaaConsumer) RecentLogsArgsForCall(i int) (string, string) {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return fake.recentLogsArgsForCall[i].appGuid, fake.recentLogsArgsForCall[i].authToken
}

func (fake *FakeNoaaConsumer) RecentLogsReturns(result1 []*events.LogMessage, result2 error) {
	fake.RecentLogsStub = nil
	fake.recentLogsReturns = struct {
		result1 []*events.LogMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeNoaaConsumer) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeNoaaConsumer) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeNoaaConsumer) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNoaaConsumer) SetOnConnectCallback(cb func()) {
	fake.setOnConnectCallbackMutex.Lock()
	fake.setOnConnectCallbackArgsForCall = append(fake.setOnConnectCallbackArgsForCall, struct {
		cb func()
	}{cb})
	fake.setOnConnectCallbackMutex.Unlock()
	if fake.SetOnConnectCallbackStub != nil {
		fake.SetOnConnectCallbackStub(cb)
	}
}

func (fake *FakeNoaaConsumer) SetOnConnectCallbackCallCount() int {
	fake.setOnConnectCallbackMutex.RLock()
	defer fake.setOnConnectCallbackMutex.RUnlock()
	return len(fake.setOnConnectCallbackArgsForCall)
}

func (fake *FakeNoaaConsumer) SetOnConnectCallbackArgsForCall(i int) func() {
	fake.setOnConnectCallbackMutex.RLock()
	defer fake.setOnConnectCallbackMutex.RUnlock()
	return fake.setOnConnectCallbackArgsForCall[i].cb
}

var _ logs.NoaaConsumer = new(FakeNoaaConsumer)
